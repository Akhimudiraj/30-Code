import cv2
import numpy as np
from tensorflow.keras.applications.mobilenet_v2 import MobileNetV2, preprocess_input, decode_predictions
try:
    model = MobileNetV2(weights='imagenet')
except Exception as e:
    print(f"Error loading model: {e}")
def recognize_objects(image_path):
    img = cv2.imread(image_path)
    resized_img = cv2.resize(img, (224, 224))
    img_array = np.expand_dims(resized_img, axis=0)
    img_array = preprocess_input(img_array)
    predictions = model.predict(img_array)
    decoded_preds = decode_predictions(predictions, top=3)[0]
    for i, (imagenet_id, label, score) in enumerate(decoded_preds):
        print(f"{i + 1}: {label} ({score:.2f})")
image_path = "Assure_oil.jpg"
recognize_objects(image_path)
import cv2
class IRBeamCounter:
    def init(self):
        self.count = 0
    def detect_object(self, frame):
        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        _, thresh = cv2.threshold(gray, 127, 255, cv2.THRESH_BINARY)
        white_pixels = cv2.countNonZero(thresh)
        if white_pixels < 50000:
            self.count += 1
            print(f"Object detected! Total count: {self.count}")
ir_counter = IRBeamCounter()
cap = cv2.VideoCapture(0)

while cap.isOpened():
    ret, frame = cap.read()
    if not ret:
        break
    ir_counter.detect_object(frame)
    cv2.imshow('IR Beam Simulation', frame)
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break
cap.release()
cv2.destroyAllWindows()
